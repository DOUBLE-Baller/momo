version: '3'
networks:
  byfn:
services:
  mysql:
    image: mysql:5.7.16
    # 设置labels
    labels:
      service: mysql
    # logging设置增加labels.service
    logging:
      options:
        labels: "service"
    container_name: mysql
    volumes:
      - ./data/mysql/mydir:/mydir
      - ./data/mysql/datadir:/var/lib/mysql
      - ./data/mysql/conf/my.cnf:/etc/my.cnf
      #      数据库还原目录 可将需要还原的sql文件放在这里
      - ./data/mysql/source:/docker-entrypoint-initdb.d
    environment:
      - "MYSQL_ROOT_PASSWORD=root"
      - "MYSQL_DATABASE=gtyl"
      - "TZ=Asia/Shanghai"
    ports:
      - 3306:3306
    restart: always
    networks:
      - byfn  
  redis:
    image: redis
    # 设置labels
    labels:
      service: redis
    # logging设置增加labels.service
    logging:
      options:
        labels: "service"
    container_name: redis
    volumes:
      - ./data/redis/datadir:/data
      - ./data/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf
      - ./data/redis/logs:/logs
    #command:
    #两个写入操作 只是为了解决启动后警告 可以去掉
      #/bin/bash -c "echo 511 > /proc/sys/net/core/somaxconn
      #&& echo never > /sys/kernel/mm/transparent_hugepage/enabled
      #&& redis-server /usr/local/etc/redis/redis.conf"
    ports:
      - 6379:6379
    networks:
      - byfn 
  #jaeger链路追踪
  jager_collector:
    image: jaegertracing/jaeger-collector:1.18
    container_name: jager_collector
    restart: always
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
      - ES_USERNAME=elastic
      - ES_PASSWORD=elasticseven666
      - LOG_LEVEL=debug
    networks:
      - byfn
    ports:
      - "14269"
      - "14268:14268"
      - "14267"
      - "14250:14250"
      - "9411:9411"

  jager_agent:
    image: jaegertracing/jaeger-agent:1.18
    container_name: jager_agent
    restart: always
    environment:
      - REPORTER_GRPC_HOST_PORT=jager_collector:14250
      - LOG_LEVEL=debug
    ports:
      - "5775:5775/udp"
      - "5778:5778"
      - "6831:6831/udp"
      - "6832:6832/udp"
    networks:
      - byfn
    depends_on:
      - jager_collector

  jaeger_query:
    image: jaegertracing/jaeger-query:1.18
    restart: always
    container_name: jaeger_query
    environment:
      - SPAN_STORAGE_TYPE=elasticsearch
      - ES_SERVER_URLS=http://elasticsearch:9200
      - ES_USERNAME=elastic
      - ES_PASSWORD=elasticseven666
      - LOG_LEVEL=debug
    ports:
      - 16686:16686
    networks:
      - byfn
  #链路追踪查看
  hotrod:
    image: jaegertracing/example-hotrod:1.6
    command: all --jaeger-agent.host-port=jager_agent:6831
    ports:
      - 8008:8080
    depends_on:
      - jager_agent
    networks:
      - byfn
  #prometheus监控
  prometheus:
    image: prom/prometheus:v2.28.1
    container_name: prometheus
    volumes:
      - ./data/prometheus/server/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: always
    user: root
    ports:
      - 9091:9090
    networks:
      - byfn

  #查看prometheus监控数据
  grafana:
        image: grafana/grafana:8.0.6
        container_name: grafana
        hostname: grafana
        restart: always
        volumes:
            - ./data/grafana/data:/var/lib/grafana
        ports:
            - "3002:3000"
        networks:
            - byfn
      
  #kafka的服务注册发现
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    hostname: zookeeper
    # always restart
    restart: always
    ports:
      - 2181:2181
    networks:
      - byfn
  #消息队列
  kafka:
    image: wurstmeister/kafka
    labels:
      service: kafka
    container_name: kafka
    ports:
      - 9092:9092
    # host ip
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    # always restart
    restart: always
    volumes:
      - ./data/kafka/docker.sock:/var/run/docker.sock
    networks:
      - byfn
  #Nginx
  #nginx:
    #image: nginx:1.12.2     
    # 镜像名称
    #container_name: nginx     
    # 容器名字
    #restart: always     
    # 开机自动重启
    #ports:     # 端口号绑定（宿主机:容器内）
       #- '80:80'
       #- '443:443'
    #volumes:      
    # 目录映射（宿主机:容器内）
       #- ./data/nginx/cert:/etc/nginx/cert
       #- ./data/nginx/nginx.conf:/etc/nginx/nginx.conf
       #- ./data/nginx/conf.d:/etc/nginx/conf.d
       #- ./data/nginx/html:/usr/share/nginx/html
       # 日志目录
       #- ./data/nginx/log:/var/log/nginx
    #networks:
       #- byfn            
    #管理端服务
  backend:
    image: ergo0-docker.pkg.coding.net/gtyl/gtyl/backend-docker-image:master-818b8624dc2b6ebc33ef6079b9af876d5f2f9f9d
    container_name: backend
    restart: always
    ports:
        - 8881:8881
    links: 
        - mysql
        - redis
        - kafka
    depends_on: 
        - mysql
        - redis
        - kafka
    networks:
       - byfn
#业务端服务
  app:
    image: ergo0-docker.pkg.coding.net/gtyl/gtyl/app-docker-image:master-a99dc5759bb01664e8f3b9e9f0e8a5d8c7bf01a4
    container_name: app
    restart: always
    ports:
        - 9988:9988
        - 8882:8882
    links: 
        - mysql
        - redis
        - kafka
    depends_on: 
        - mysql
        - redis
        - kafka
    networks:
       - byfn          