// Code generated by goctl. DO NOT EDIT!
// Source: ws.proto

package ws

import (
	"context"

	"backend/service/im/cmd/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	ConnectReply         = pb.ConnectReply
	ConnectRequest       = pb.ConnectRequest
	DisConnectReply      = pb.DisConnectReply
	DisConnectRequest    = pb.DisConnectRequest
	Msg                  = pb.Msg
	PushMsgRequest       = pb.PushMsgRequest
	PushRoomCountRequest = pb.PushRoomCountRequest
	PushRoomMsgRequest   = pb.PushRoomMsgRequest
	SuccessReply         = pb.SuccessReply

	Ws interface {
		// 返送单条消息
		PushSingleMsg(ctx context.Context, in *PushRoomMsgRequest, opts ...grpc.CallOption) (*SuccessReply, error)
		Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectReply, error)
		DisConnect(ctx context.Context, in *DisConnectRequest, opts ...grpc.CallOption) (*DisConnectReply, error)
	}

	defaultWs struct {
		cli zrpc.Client
	}
)

func NewWs(cli zrpc.Client) Ws {
	return &defaultWs{
		cli: cli,
	}
}

// 返送单条消息
func (m *defaultWs) PushSingleMsg(ctx context.Context, in *PushRoomMsgRequest, opts ...grpc.CallOption) (*SuccessReply, error) {
	client := pb.NewWsClient(m.cli.Conn())
	return client.PushSingleMsg(ctx, in, opts...)
}

func (m *defaultWs) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectReply, error) {
	client := pb.NewWsClient(m.cli.Conn())
	return client.Connect(ctx, in, opts...)
}

func (m *defaultWs) DisConnect(ctx context.Context, in *DisConnectRequest, opts ...grpc.CallOption) (*DisConnectReply, error) {
	client := pb.NewWsClient(m.cli.Conn())
	return client.DisConnect(ctx, in, opts...)
}
